generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id Int @id @default(autoincrement())
  username String @unique @db.VarChar(35)
  bio String @default("No bio") @db.VarChar(100)
  email String @unique
  creation_date DateTime @default(now())
  bannerURL String @default("https://cdn.discordapp.com/attachments/891978000000000000/891978000000000000/unknown.png")
  avatarURL String @default("https://cdn.discordapp.com/attachments/891978000000000000/891978000000000000/unknown.png")
  password String
  songs song[]
  history history[]
  Favorite Favorite[]
  subscription Subscription[]
}

model song {
  id Int @id @default(autoincrement())
  slug  String? @unique @db.VarChar(60) @default(cuid())
  title String @db.VarChar(100)
  coverURL String
  songURL String
  publication_date DateTime @default(now())
  created_at DateTime @default(now())
  user_id Int
  artist_id Int
  album_id Int?
  duration Int
  account account @relation(fields: [user_id], references: [id])
  artist artist @relation(fields: [artist_id], references: [id])
  album Album? @relation(fields: [album_id], references: [id])
  history history[]
  Favorite Favorite[]
  Featurings Featurings[]
}

model artist {
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(100)
  slug String? @unique @db.VarChar(60) @default(cuid())
  songs song[]
  avatarURL String
  subscription Subscription[]
  Album Album[]
  Featurings Featurings[]
}

model history {
  id Int @id @default(autoincrement())
  song_id Int
  account_id Int
  date DateTime @default(now())
  account account @relation(fields: [account_id], references: [id])
  song song @relation(fields: [song_id], references: [id])
}

model Favorite {
  id Int @id @default(autoincrement())
  account_id Int
  song_id Int
  account account @relation(fields: [account_id], references: [id])
  song song @relation(fields: [song_id], references: [id])
}

model Subscription {
  id Int @id @default(autoincrement())
  account_id Int
  artist_id Int
  account account @relation(fields: [account_id], references: [id])
  artist artist @relation(fields: [artist_id], references: [id])
}

model Album {
  id Int @id @default(autoincrement())
  title String @db.VarChar(100)
  coverURL String
  publication_date DateTime @default(now())
  created_at DateTime @default(now())
  artist_id Int
  artist artist @relation(fields: [artist_id], references: [id])
  songs song[]
}

model Featurings {
  id Int @id @default(autoincrement())
  song_id Int
  artist_id Int
  song song @relation(fields: [song_id], references: [id])
  artist artist @relation(fields: [artist_id], references: [id])
}